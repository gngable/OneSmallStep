@using OneSmallStep.Database.Models
@using OneSmallStep.Database
@using Toolbelt.Blazor.SpeechSynthesis
@using EventAggregator.Blazor
@using OneSmallStep.Events
@inject SpeechSynthesis SpeechSynthesis
@inject IEventAggregator EventAggregator
@implements IHandle<OneSmallStep.Events.RecipeFinishedEvent>

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">SKTL</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @*<li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </li>*@
        
        @foreach (var recipe in _recipes)
        {
            if (recipe.Id == _currentRecipeId)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link border border-light rounded font-weight-bold" @onmouseover="() => Speak(recipe.Title)">
                        <h5>@recipe.Title</h5>
                    </NavLink>
                </li>
            }
            else
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link font-weight-bold" @onmouseover="() => Speak(recipe.Title)" @onclick="async () => await StartRecipe(recipe.Id)">
                        <h5>@recipe.Title</h5>
                    </NavLink>
                </li>
            }
        }
        
        <li class="nav-item px-3">
            <NavLink class="nav-link font-weight-bold" @onmouseover="() => Speak(_makeYourOwnLabel)" @onclick="async () => await MakeYourOwn()">
                <h5>@_makeYourOwnLabel</h5>
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private List<Recipe> _recipes = new List<Recipe>();

    private int? _currentRecipeId = null;
    string _makeYourOwnLabel = "Make Your Own";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            _recipes = GetRecipes();
            EventAggregator.Subscribe(this);
        }
        catch (Exception ex)
        {
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private List<Recipe> GetRecipes()
    {
        try
        {
            using var context = new OneSmallStepContext{DatabasePath = "C:\\Git\\Personal\\OneSmallStep\\OneSmallStep.Database\\sktl.db"};
            return context.Recipes.ToList();
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    private void Speak(string text)
    {
        if (SpeechSynthesis.Speaking) SpeechSynthesis.Cancel();

        SpeechSynthesis.Speak(text);
    }

    private async Task StartRecipe(int recipeId)
    {
        await EventAggregator.PublishAsync(new ThinkingStartEvent());
        await Task.Delay(1000);
        await EventAggregator.PublishAsync(new ThinkingDoneEvent());

        _currentRecipeId = recipeId;
        await EventAggregator.PublishAsync(new StartRecipeEvent{RecipeId = recipeId});
    }

    public async Task HandleAsync(RecipeFinishedEvent recipe)
    {
        _currentRecipeId = null;

        await InvokeAsync(StateHasChanged);
    }

    private async Task MakeYourOwn()
    {
        await EventAggregator.PublishAsync(new ThinkingStartEvent());
        await Task.Delay(1000);
        await EventAggregator.PublishAsync(new ThinkingDoneEvent());

        _currentRecipeId = null;
        await EventAggregator.PublishAsync(new StartCustomRecipeEvent());
    }

}
