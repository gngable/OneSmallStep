@inherits LayoutComponentBase
@using OneSmallStep.Events
@using OneSmallStep.Pages
@using EventAggregator.Blazor
@implements IHandle<OneSmallStep.Events.StartRecipeEvent>
@implements IHandle<OneSmallStep.Events.RecipeFinishedEvent>
@implements IHandle<OneSmallStep.Events.ThinkingStartEvent>
@implements IHandle<OneSmallStep.Events.ThinkingDoneEvent>
@inject IEventAggregator EventAggregator

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <div class="content px-4 position-relative">
            @if (!_recipe.HasValue)
            {
                if (!_noRender)
                {
                    <OneSmallStep.Pages.Index/>
                }
            }
            else
            {
                <Recipe RecipeId="@_recipe.Value"></Recipe>
            }
        </div>
        
        @if (_thinking)
        {
            <div class="semi-opaque-overlay" />

            <div class="d-flex flex-row justify-content-center transparent-overlay">
                <div class="d-flex flex-column justify-content-center">
                    <h1>Thinking...</h1>
                </div>
            </div>
        }
    </div>
</div>

@code
{
    private int? _recipe;
    private bool _noRender = false;

    private bool _thinking = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            EventAggregator.Subscribe(this);
        }
        catch (Exception ex)
        {
        }
    }

    public async Task HandleAsync(StartRecipeEvent recipe)
    {
        if (_recipe != null)
        {
            _noRender = true;
            await HandleAsync(new RecipeFinishedEvent());
            await Task.Delay(10);
            _noRender = false;
        }

        _recipe = recipe.RecipeId;

        await InvokeAsync(StateHasChanged);
    }

    public async Task HandleAsync(RecipeFinishedEvent recipe)
    {
        _recipe = null;

        await InvokeAsync(StateHasChanged);
    }

    public async Task HandleAsync(ThinkingStartEvent thinkingStart)
    {
        _thinking = true;
        await InvokeAsync(StateHasChanged);
    }

    public async Task HandleAsync(ThinkingDoneEvent thinkingDone)
    {
        _thinking = false;
        await InvokeAsync(StateHasChanged);
    }
}
