@using OneSmallStep.ViewModels
@using Toolbelt.Blazor.SpeechSynthesis
@inject RecipeViewModel ViewModel
@inject SpeechSynthesis SpeechSynthesis

<div class="container-fluid">
    <div class="row">
        <div class="col d-flex justify-content-center">
            <h1>@ViewModel.Recipe.Title</h1>
        </div>
    </div>
    
    <div class="row d-flex align-items-stretch" style="height: calc(100vh - 200px)">
        @if (ViewModel.CurrentState == RecipeViewModel.State.Start)
        {
            <div class="col d-flex justify-content-center my-4">
                <h1>@ViewModel.Recipe.Description</h1>
            </div>
        }
        else if (ViewModel.CurrentState == RecipeViewModel.State.IngredientStart)
        {
            <div class="col d-flex justify-content-center my-4">
                <h1>@RecipeViewModel.IngredientStartText</h1>
            </div>
        }
        else if (ViewModel.CurrentState == RecipeViewModel.State.StepStart)
        {
            <div class="col d-flex justify-content-center my-4">
                <h1>@RecipeViewModel.StepStartText</h1>
            </div>
        }
        else if (ViewModel.CurrentState == RecipeViewModel.State.Ingredients)
        {
            <div class="col d-flex justify-content-center my-4">
                <h3>
                    <input type="checkbox" @bind="ViewModel.IngredientChecked" class="mr-1"/>
                    @ViewModel.IngredientLabel
                </h3>
            </div>
        }
        else if (ViewModel.CurrentState == RecipeViewModel.State.Steps)
        {
            <div class="col d-flex justify-content-center my-4">
                <h3>
                    @ViewModel.CurrentStep.Text
                </h3>
            </div>
        }
    </div>
    
    <div class="row">
        @if (ViewModel.CurrentState == RecipeViewModel.State.Start)
        {
            <div class="col d-flex justify-content-end">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.StartRecipe(); StateHasChanged(); }">@StartRecipe <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
            </div>
        }
        else if (ViewModel.CurrentState == RecipeViewModel.State.IngredientStart)
        {
            <div class="col d-flex justify-content-start">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.CurrentState = RecipeViewModel.State.Start; StateHasChanged(); }"><span class="oi oi-media-skip-backward" aria-hidden="true"></span> Previous</button>
            </div>

            <div class="col d-flex justify-content-end">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.StartIngredients(); StateHasChanged(); }">@Ready <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
            </div>
        }
        else if (ViewModel.CurrentState == RecipeViewModel.State.StepStart)
        {
            <div class="col d-flex justify-content-start">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.StepStartBack(); StateHasChanged(); }"><span class="oi oi-media-skip-backward" aria-hidden="true"></span> Previous</button>
            </div>

            <div class="col d-flex justify-content-end">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.StartSteps(); StateHasChanged(); }">@Ready <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
            </div>
        }
        else if (ViewModel.CurrentState == RecipeViewModel.State.Ingredients)
        {
            <div class="col d-flex justify-content-start">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.PreviousIngredient(); StateHasChanged(); }"><span class="oi oi-media-skip-backward" aria-hidden="true"></span> Previous</button>
            </div>

            <div class="col d-flex justify-content-center">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.RepeatIngredient(); StateHasChanged(); }"><span class="oi oi-loop-circular" aria-hidden="true"></span> Repeat</button>
            </div>

            <div class="col d-flex justify-content-end">
                <button disabled="@(!ViewModel.IngredientChecked)" class="btn btn-primary m-3" @onclick="() => { ViewModel.NextIngredient(); StateHasChanged(); }">@Next <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
            </div>
        }
        else if (ViewModel.CurrentState == RecipeViewModel.State.Steps)
        {
            <div class="col d-flex justify-content-start">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.PreviousStep(); StateHasChanged(); }"><span class="oi oi-media-skip-backward" aria-hidden="true"></span> Back</button>
            </div>

            <div class="col d-flex justify-content-center">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.RepeatStep(); StateHasChanged(); }"><span class="oi oi-loop-circular" aria-hidden="true"></span> Repeat</button>
            </div>

            <div class="col d-flex justify-content-end">
                <button class="btn btn-primary m-3" @onclick="() => { ViewModel.NextStep(); StateHasChanged(); }">@(string.IsNullOrEmpty(ViewModel.CurrentStep.NextButtonText) ? Next : ViewModel.CurrentStep.NextButtonText) <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int RecipeId { get; set; }

    private const string StartRecipe = "Start Recipe!";
    private const string Ready = "Ready";
    private const string Next = "Next";

    protected override async Task OnInitializedAsync()
    {
        ViewModel.RecipeId = RecipeId;
        await ViewModel.Load();
    }
}
